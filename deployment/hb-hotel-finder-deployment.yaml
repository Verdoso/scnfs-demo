## Set the API endpoint used to create the Deployment resource.
apiVersion: apps/v1
## Define the type of the resource.
kind: Deployment
## Set the parameters that make the object identifiable, such as its name, namespace, and labels.
metadata:
  annotations:
  labels:
    app: hb-hotel-finder
  name: hb-hotel-finder
  namespace: scnfs-demo
## Define the desired configuration for the Deployment resource.
spec:
  ## Set the number of replicas.
  ## This will create a ReplicaSet that will manage 3 pods of the hb-hotel Finder application.
  replicas: 1
  ## Identify the pods managed by this Deployment using the following selectors.
  ## In this case, all pods with the label `hb-hotel-finder`.
  selector:
    matchLabels:
      app: hb-hotel-finder
  ## Set the RollingOut strategy for the Deployment.
  ## For example, roll out only 25% of the new pods at a time.
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  ## Set the configuration for the pods.
  template:
    ## Define the identifiable metadata for the pods.
    ## For example, all pods should have the label `hb-hotel-finder`
    metadata:
      labels:
        app: hb-hotel-finder
    ## Define the desired state of the pod configuration.
    spec:
      containers:
        ## Set the image to be executed inside the container and image pull policy
        ## In this case, run the `hb-hotel-finder` application in version 0.0.1-SNAPSHOT and
        ## only pull the image if it's not available on the current host.
      - image: verdoso/hb-hotel-finder:latest
        #imagePullPolicy: IfNotPresent
        name: hb-hotel-finder
        ## Expose the port the container is listening on.
        ## For example, exposing the application port 9999 via TCP.
        ports:
        - containerPort: 8888
          protocol: TCP
        ## The secrets where the authentication data to be used in the different apps reside
        volumeMounts:
          - name: secret-volume
            mountPath: /etc/secrets
        ## The enviroment variable with which to tell the app where the secrets are mounted
        env: 
          -
            name: docker-secret.bind-path
            value: /etc/secrets
      volumes:
        - name: secret-volume
          secret:
            secretName: scnfs-secrets
